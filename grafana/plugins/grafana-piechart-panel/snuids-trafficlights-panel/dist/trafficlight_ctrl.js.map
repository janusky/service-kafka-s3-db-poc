{"version":3,"sources":["../src/trafficlight_ctrl.js"],"names":["MetricsPanelCtrl","moment","_","TimeSeries","panelDefaults","bgColor","trafficLightSettings","lightsPerLine","width","invertScale","showValue","showTrend","redThreshold","greenThreshold","max","fontSize","fontColor","units","digits","spreadControls","sortLights","renderLink","linkUrl","linkTooltip","linkTargetBlank","TrafficLightCtrl","$scope","$injector","templateSrv","defaultsDeep","panel","events","on","onInitEditMode","bind","onPanelTeardown","render","onRender","onDataReceived","onDataError","percentPerLight","data","updateTraffics","series","dataList","newseries","map","seriesHandler","i","length","newserie","label","datapoints","slice","trend","value","trendClass","push","e","rows","sortBy","o","name","replace","orderBy","seriesData","alias","target","addEditorTab","$timeout","cancel","nextTickPromise","link","scopedVars","format","scoped","key","trafficsperline","lines","metrics","scope","elem","$panelContainer","find","css","templateUrl"],"mappings":"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","file":"trafficlight_ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport moment from 'moment';\nimport _ from 'lodash';\nimport TimeSeries from 'app/core/time_series';\n\nimport './css/trafficlight-panel.css!';\n\nconst panelDefaults = {\n  bgColor: null\n  ,trafficLightSettings:\n  {\n    lightsPerLine:5,\n    width:20,\n    invertScale:false,\n    showValue:true,\n    showTrend:true,\n    redThreshold:20,\n    greenThreshold:80,\n    max:100,\n    fontSize:'12px',\n    fontColor: 'black',\n    units:'',\n    digits:1,\n    spreadControls:false,\n    sortLights:false,\n    renderLink:false,\n    linkUrl: \"\",\n    linkTooltip: \"\",\n    linkTargetBlank:false\n  }\n};\n\n\n\nexport class TrafficLightCtrl extends MetricsPanelCtrl {\n  constructor($scope, $injector, templateSrv) {\n    super($scope, $injector);\n    _.defaultsDeep(this.panel, panelDefaults);\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\n    this.events.on('panel-initialized', this.render.bind(this));\n\n    this.events.on('render', this.onRender.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n\n    this.percentPerLight=100;\n\n    this.data=[]\n    this.templateSrv = templateSrv\n    this.updateTraffics();\n  }\n\n\n\n  onDataError() {\n    this.series = [];\n    this.render();\n  }\n\n  onRender() {\n    //this.data = this.parseSeries(this.series);\n  }\n\n\n\n  onDataReceived(dataList) {\n    var newseries=[]\n\n    try\n    {\n      this.series = dataList.map(this.seriesHandler.bind(this));\n\n\n\n      for(var i =0;i<this.series.length;i++)\n      {\n        var newserie={\n          \"name\":this.series[i].label,\n          \"value\":this.series[i].datapoints.slice(-1)[0][0]\n        }\n\n        if(this.series[i].datapoints.length>1)\n        {\n          newserie.trend=newserie.value-this.series[i].datapoints.slice(-2)[0][0]\n\n          if(newserie.trend>0)\n            if(this.panel.trafficLightSettings.invertScale)\n              newserie.trendClass='traffic-light-trend-bad'\n            else\n              newserie.trendClass='traffic-light-trend-good'\n          else if(newserie.trend<0)\n            if(this.panel.trafficLightSettings.invertScale)\n              newserie.trendClass='traffic-light-trend-good'\n            else\n              newserie.trendClass='traffic-light-trend-bad'\n          else\n            newserie.trendClass='traffic-light-trend-neutral'\n        }\n        newseries.push(newserie);\n      }\n\n    }\n    catch(e)\n    {\n      // This is not a time serie\n      this.series=[];\n      for(var i=0;i<dataList[0].rows.length;i++)\n      {\n        var newserie={\n          \"name\":dataList[0].rows[i][0],\n          \"value\":dataList[0].rows[i][1]\n        }\n        newseries.push(newserie);\n      }\n    }\n\n  //    console.log(newseries)\n\n    if(this.panel.trafficLightSettings.sortLights)\n    {\n      this.data=_.sortBy(newseries, [function(o) { return o.name.replace(\":\",\"\").replace(\" \",\"\").replace(\"}\",\"\").replace(\"{\",\"\") }]);\n    }\n    else\n    {\n      if(this.panel.trafficLightSettings.invertScale)\n        this.data=_.orderBy(newseries, 'value','desc');\n      else\n        this.data=_.orderBy(newseries, 'value','asc');\n    }\n  }\n\n  seriesHandler(seriesData) {\n    var series = new TimeSeries({\n      datapoints: seriesData.datapoints,\n      alias: seriesData.target\n    });\n    return series;\n  }\n\n  onInitEditMode() {\n\n    this.addEditorTab('Options', 'public/plugins/snuids-trafficlights-panel/editor.html', 2);\n  }\n\n  onPanelTeardown() {\n    this.$timeout.cancel(this.nextTickPromise);\n  }\n\n  renderLink(link, scopedVars, format){\n    var scoped = {}\n    for (var key in scopedVars) {\n        scoped[key] = { value: scopedVars[key] }\n    }\n    if (format) {\n        return this.templateSrv.replace(link, scoped, format)\n    } else {\n        return this.templateSrv.replace(link, scoped)\n    }\n  }\n\n  updateTraffics() {\n\n    var trafficsperline=this.panel.trafficLightSettings.lightsPerLine;\n\n    if(this.panel.trafficLightSettings.spreadControls)\n    {\n      trafficsperline=this.data.length;\n      if(this.data.length==0)\n        trafficsperline=1;\n      this.percentPerLight=100/trafficsperline;\n    }\n    else\n      this.percentPerLight=100/trafficsperline;\n\n    this.lines=[];\n    var metrics=[];\n    for(var i=0;i<this.data.length;i++)\n    {\n      if((i%trafficsperline)==0)\n\t\t\t{\n\t\t\t\tmetrics=[];\n\t\t\t\tthis.lines.push(metrics);\n      }\n      metrics.push(this.data[i]);\n    }\n    this.nextTickPromise = this.$timeout(this.updateTraffics.bind(this), 1000);\n  }\n\n  link(scope, elem) {\n    this.events.on('render', () => {\n      const $panelContainer = elem.find('.panel-container');\n\n      if (this.panel.bgColor) {\n        $panelContainer.css('background-color', this.panel.bgColor);\n      } else {\n        $panelContainer.css('background-color', '');\n      }\n    });\n  }\n}\n\nTrafficLightCtrl.templateUrl = 'module.html';\n"]}